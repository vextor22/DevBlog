<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on Matt Higgins Dev Blog</title><link>/tags/linux/</link><description>Recent content in linux on Matt Higgins Dev Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 06 Oct 2020 21:18:06 -0400</lastBuildDate><atom:link href="/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Configure Vim with Ansible</title><link>/posts/vim-pathogen-ansible/</link><pubDate>Tue, 06 Oct 2020 21:18:06 -0400</pubDate><guid>/posts/vim-pathogen-ansible/</guid><description>If you want to maintain a base Vim configuration file while also having the ability to easily configure Vim for Pathogen package management in environments that will support it, you can do so with Ansible.
The Ansible script for this involves inserting a base .vimrc (or skipping this step if you have another method of inserting the .vimrc), and then installing Pathogen with infect() at the head of the .vimrc. This method accomplishes configuration from scratch, or addition of Pathogen to an existing configuration without destroying existing changes.</description></item><item><title>Persistent NFS with FSTab</title><link>/posts/persistent-nfs-with-fstab/</link><pubDate>Mon, 05 Oct 2020 21:17:05 -0400</pubDate><guid>/posts/persistent-nfs-with-fstab/</guid><description>If you want to mount a Samba network file share persistently in linux, you will want to use fstab. With fstab, the share will be remounted when the system boots, so services that depend on the share will be able to function.
Test First! Before adding the network file share to fstab, test it with mount. For my environment the resulting mount command was:
sudo mount -t cifs //&amp;lt;NFS server&amp;gt;/&amp;lt;NFS path&amp;gt; /mnt/nfs_downloads/ -o username=&amp;lt;username&amp;gt;,password=&amp;lt;password&amp;gt;,uid=$(id -u),gid=$(id -g),context=&amp;#34;system_u:object_r:container_file_t:s0&amp;#34; Notice the context in the options section to provide an SELinux context to the file share.</description></item><item><title>Sudoless Docker</title><link>/posts/sudoless-docker/</link><pubDate>Sun, 04 Oct 2020 21:15:06 -0400</pubDate><guid>/posts/sudoless-docker/</guid><description>Using sudo with every docker command is incredibly annoying after a while. If you are configuring a development environment with something like docker-compose, you really won&amp;rsquo;t want to keep writing a command, forgetting sudo, and then doing the command again. Thankfully, it is really easy to simply fix this problem. The instructions can be found on the docker documentation, aside from a small change for Arch.
Create the docker group: sudo groupadd docker Add yourself to the group: sudo usermod -aG docker $USER (On arch: sudo gpasswd -a $USER docker) Sign out and then back in.</description></item></channel></rss>